#1 (Jad)
As a user, I can search for available hotel rooms
a) Description: 
A user on the website can search for available hotel rooms based on their desired check in and check-out dates.
They can also search for other preferences like room type, size, amenitites and much more. The search should return results that match the preferences.

b) Tasks:
 - Implement search filter based on date, room type, and amenities
 - Should display search results in a user friendly format for example sorted by price
 - Should allow users to filter and sort the search results as they browse

c) Tests:
 - Verify that search returns hotel rooms for the specified dates
 - Confirm that search returns only available rooms that match the criteria
 - Enure that filters and sorting options all work correctly

d) Assignee:
 - Peter Griffin: Implement search function and filters
 - Homer Simpson: Design the User interface for displaying the serch results

e) Estimation: 25

f) Priority: 10

g) Done:
 - Search function is working
 - Filters and sorting options work as intended
 - Search results are correctly showing what is available for the specified dates
---------------------------------------------------------------------------------------------------------------------------------------------------------
#2 (Jad)
As a user, I can pay for my hotel reservation
a) Description:
User on the hotel website can pay for their reservation using various payment methods like credit/debit card or pay pal or bank transfer, etc.
The payment management system should confirm the payment was successful or failed, and should send the receipt to the user.

b) Tasks:
 - Integrate payment gateway into management system
 - Implement payment confirmation and error handling
 - Send the payment receipt to the user

c) Tests:
 - Verify that different forms of payment are all working
 - Check for accurate handling of payment failures (customer support system)
 - Confirm that users are recieving receipts

d) Assignee:
 - Drake: Handle payment integration
 - P diddy: Handle billing and payment error customer support

e) Estimation: 30

f) Priority: 15

g) Done:
 - Payment processing is reliable and secure
 - Customers receipts are correctly recieved
 - All forms of payment are working
------------------------------------------------------------------------------------------------------
#3 (Osvaldo)
As a user I can create a base 2D shape like circles or rectangles.

a) Description: A user can create simple / basic 2D shapes which will then display on a canvas. 
The system will use inheritance for the shapes and a draw function to display and resize the shapes.

b) Tasks:
- Create different shapes that inherit from a base shape class 
- Display the shape using the draw function
- Be able to resize the shapes

c) Tests:
- Verify that the draw function works 
- Chack if the resize works for the shape

d) Assignee: 
- " ", implements inheritance for the shapes and uses the draw function
- " ", implements the operator overloading for resizing the shapes

e) Estimation: 15

f) Priority: 7 

g) Done: 
- Shapes are created and displayed
- Operator overloading is working properly
-------------------------------------------------------------------------------------------------------
#4 (Kamin)
As a user, I can save my created 2D shapes for future use.

a) Description: A user can save their created 2D shapes in a file format so they can be loaded later. The system will provide options to choose the file type and ensure the shapes retain their properties.

b) Tasks:

- Implement functionality to save shapes in different file formats (e.g., JSON, SVG).
- Create a loading mechanism to retrieve saved shapes and display them on the canvas.
- Ensure all properties of the shapes are preserved during saving and loading.
c) Tests:

- Verify that shapes can be saved correctly in the chosen file format.
- Check that loading the saved shapes restores their properties accurately.
d) Assignee:

Developer C: Implements the saving functionality and file format options.
Developer D: Implements the loading mechanism for retrieving saved shapes.
e) Estimation: 20 hours

f) Priority: 6 (Medium)

g) Done:

- Shapes can be saved successfully in the selected file formats.
- Loaded shapes display correctly with all properties intact.
-------------------------------------------------------------------------------------------------------
#5 (Kamin)
As a user, I can group multiple shapes into a single entity for easier manipulation.

a) Description: A user can group multiple 2D shapes into a single entity, allowing them to move, resize, and modify the grouped shapes as one. The system will offer options to ungroup the shapes as needed.

b) Tasks:

- Implement the ability to select multiple shapes on the canvas.
- Create a grouping functionality to bind the selected shapes into a single entity.
- Develop an ungrouping feature to separate the grouped shapes back into individual entities.
c) Tests:

- Verify that multiple shapes can be successfully grouped.
- Check that grouped shapes move and resize as a single entity.
- Test the ungrouping feature to ensure shapes are restored to individual status correctly.
d) Assignee:

Developer A: Implements shape selection and grouping functionality.
Developer B: Develops the ungrouping feature and tests.
e) Estimation: 15 hours

f) Priority: 5 (Medium)

g) Done:

- Users can group and ungroup shapes successfully.
- Grouped shapes maintain their properties when manipulated as a single entity.
-------------------------------------------------------------------------------------------------------

#6 (Melvin)
As a user, I can apply transformations such as rotation, scaling, and translation to shapes so that I can adjust them to fit different use cases within the graphic model.

a.) Description: A user is allowed to transform shapes dynamically using different functions. The functions consist of rating shapes by a specified angle (1-360 degrees), resizing or scaling shapes, and moving (translating) them across a fixed dimension.

b.) Tasks:
-Implement transformation methods for rotating shapes by a given angle
-Implement scaling functionality, ensuring that shapes scale relative to a fixed point
-Implement translation functionality to move shapes across the rendering window

c.) Tests:
-Verify that shapes rotate smoothly without distortion
-Ensure scaling retains shape proportions and is centered around a specified point
-Confirm translation moves shapes to precise coordinates
-Check that transformations do not interfere with shape rendering or color
-Review documentation to confirm it accurately describes transformation usage

d.) Assignees:

-Developer A: Rotation and translation functionalities
-Developer B: Scaling functionalities
-Developer C: Transformation input interface

e.) Estimation: 5 hours

e.) Priority: 8

f:) Done: 
-Shapes can be rotated, scaled, and translated without errors
-User interface allows easy input of transformation values

-------------------------------------------------------------------------------------------------------

#7 (Audrey)
As a user, I can prompt the program at any time to produce a report of all shapes, sorted by ID, so that I may view the data (including their properties) for each one, in the form of a list/table.

a.) Description: Produce a shape listing report sorted by shape id (at any time). All
shape properties should be included in the report.

b.) Tasks:
-Implement a menu/menu option that allows the user to produce the report
-Implement a print function, called by the menu option, that will display all the data of every available shape that is stored within the shape vector
-Within the print function, implement sorting to print each shape by their ID numbers

c.) Tests:
-Confirm that the user can successfully access the menu option
-Verify that selecting the option calls the appropriate function
-Ensure that all shapes in the vector, including all their properties, are displayed
-Verify that the shapes being displayed are properly sorted by their ID numbers
-Ensure that the data being output is easy for the user to read and understand, formatted and labeled properly
-Confirm that, after printing, the user may return to the main program without issue

d.) Assignees:
-Developer A: Adding the print functionalities, code outputting each shape’s data
-Developer B: Creating a menu/menu option to call the function, adding code to the function to allow for greater user readability (labels, spacing, etc.)

e.) Estimation: 10 hrs

f.) Priority: 11

g:) Done: 
-User can easily access the option to create a listing report of all shapes
-After selecting the option, all shapes are displayed in the form of a list/table, sorted by ID
-User may seamlessly return to the main program after displaying the report

-------------------------------------------------------------------------------------------------------

#8 (Nick)
As a user, I can view a report of shapes sorted by area.

a) Description:  
A user can generate a report that lists all shapes with a calculated area, sorted in ascending order based on their area. Each entry in the report includes the shape's type, 
unique ID, and its computed area. The report allows users to easily view and compare shapes by their size at any given time.

b) Tasks:  
- Implement logic to calculate the area for each shape and filter out those without an area.
- Sort shapes with an area by ascending order of area.
- Display each shape’s type, ID, and area in the report.

c) Tests:  
- Verify that shapes without an area are excluded from the report.
- Confirm that shapes in the report are correctly sorted by area.
- Ensure that each entry includes accurate type, ID, and area information.

d) Assignee:  
- Developer A: Implement area calculation and sorting functionality.
- Developer B: Design the report layout and presentation.

e) Estimation: 20  

f) Priority: 3

g) Done:  
- Shapes are filtered correctly, showing only those with an area.
- Sorting by area is functioning as expected.
- Report displays type, ID, and area accurately for each shape.

-------------------------------------------------------------------------------------------------------

#9 (Nick)
As a user, I can view a report of shapes sorted by perimeter.  

a) Description: 
A user can generate a report listing only shapes with a calculated perimeter, sorted in ascending order based on their perimeter. Each entry in the report includes the shape's type, unique ID, and its computed perimeter. 
This report enables users to assess and organize shapes by perimeter measurements.  

b) Tasks:  
- Implement logic to calculate the perimeter for each shape and filter out those without a perimeter.  
- Sort shapes with a perimeter by ascending order of perimeter.  
- Display each shape’s type, ID, and perimeter in the report.  

c) Tests:  
- Verify that shapes without a perimeter are excluded from the report.  
- Confirm that shapes in the report are correctly sorted by perimeter.  
- Ensure that each entry includes accurate type, ID, and perimeter information.  

d) Assignee:  
- Developer A: Implement perimeter calculation and sorting functionality.  
- Developer B: Design the report layout and presentation.  

e) Estimation: 15  

f) Priority: 9  

g) Done:  
- Shapes are filtered correctly, showing only those with a perimeter.  
- Sorting by perimeter is functioning as expected.  
- Report displays type, ID, and perimeter accurately for each shape.

------------------------------------------------------------------------------------------------------

#10 (Salomon)
As a user, I am able to save all changes between executions

a) Description: 
Any changes that the user makes is automatically saved, and is loaded upon every execution

b) Tasks:
-Implement a function that saves all the shapes and their details in a save file, and is called anytime changes are made
-Implement a function that reads the save file and places the shapes upon execution of the program

c) Tests:
-Verify the save function is properly adding to the save file every time a shape is created/ deleted
-Verify the save function is properly adding to the save file every time a shape is changed
-Make sure the shapes from the save file are automatically read into the program upon execution
-Make sure the all shapes read from the save file are the same from the previous execution

d) Assignees:
-Developer A: Add the save function, ensure proper format into the save file
-Developer B: Call save function any time a shape is created, destroyed, or changed
-Developer C: Add the load function, make it so it’s called initially when the program is executed

e) Estimation: 20 hrs

f) Priority: 5 (medium)

g) Done:
-All shape data is saved when a change occurs
-All previous shape data is retrieved from save file upon execution of program and is loaded

-------------------------------------------------------------------------------------------------------



