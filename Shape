#ifndef SHAPE_H_
#define SHAPE_H_

#include <string> // std::string & std::to_string
#include <cmath>  
using std::to_string;

class Shape {
        std::string type;
        int xPos, yPos;
        std::string color; // This might be changed to use Qt's built in color class QColor
        int rotationAngle;

    public:
        Shape()
            : type{""}, xPos{0}, yPos{0}, color{""}, rotationAngle{0} {}

        Shape(std::string _type, int x, int y, std::string _color, int _rotationAngle) 
            : type{_type}, xPos{x}, yPos{y}, color{_color}, rotationAngle{_rotationAngle} {}
        
        ~Shape() {}

        std::string getType() const { return type; }
        
        int getXPos() const { return xPos; }
        
        int getYPos() const { return yPos; }
        
        std::string getColor() const { return color; }
        
        int getRotationAngle() const { return rotationAngle; }

        virtual void draw() = 0;

        // getStringFormat() is meant for the parser to have an easy way to store shapes and their properties
        // The general format im using is just the variables from the base shaoe class in order
        // The overrided version should be the same but with the derived variables at the end in order
        virtual std::string getStringFormat() const {
            return getType() + " " + to_string(getXPos()) + " " + to_string(getYPos()) + " " + getColor() + " " + to_string(getRotationAngle());
        }

}; 


class Rectangle : public Shape {
        int width, height;

    public:
        Rectangle()
            : Shape("Rectangle", 0, 0, "White", 0), width{1}, height{1} {}

        Rectangle(int x, int y, std::string _color, int _rotationAngle, int _width, int _height)
            : Shape("Rectangle", x, y, _color, _rotationAngle), width{_width}, height{_height} {}
        
        ~Rectangle() {}

        int getWidth() const { return width; }

        int getHeight() const { return height; }

        void draw() override {}

        std::string getStringFormat() const override {
            return getType() + " " + to_string(getXPos()) + " " + to_string(getYPos()) + " " + getColor() + " " + to_string(getRotationAngle()) +
                " " + to_string(getWidth()) + " " + to_string(getHeight());
        }

    };

class Line : public Shape {
private:
    int x2, y2; //Endpoint coordinates for the line

public: 
    Line() : Shape("Line", 0, 0, "Black", 0), x2(0), y2(0) {}

    Line(int x1, int y1, int x2, int y2, std::string color, int rotationAngle)
        : Shape("Line", x1, y1, Color, rotationAngle), x2(x2), y2(y2) {}

    void draw() override {
        //drawing logic

    }

    double perimeter() const override{
        return std::hypot(x2- getXPos(), y2 - getYPos()); // formula to find distance
    }

    double area() const override{
        return 0; //line has no area
    }

    std::string getStringFormat() const override{
        return getType() + "" + to_string(getXPos())+ "" + to_string(getYPos()) + " " + getColor() + " " +
               to_string(getRotationAngle()) + " " + to_string(x2) + " " + to_string(y2);
        }
    };







#endif
